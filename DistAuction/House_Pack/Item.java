import java.io.File;
import java.io.FileNotFoundException;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Scanner;

/**
 * The House_Pack.Item object that is generated by the House_Pack.AuctionHouse
 */
public class Item{
    private String itemID;
    private String description;
    private double minimumBid;
    private double currentBid;
    private int currentBidHolder;
    private boolean needsFinalized;

    /**
     * Is an item that is up for auction
     * @param itemLine is the line in the file to get the item number from
     * @throws FileNotFoundException if items.txt is not found
     */
    public Item(int itemLine) throws FileNotFoundException {
        //at start, current bid = 0
        currentBid = 0.0;
        currentBidHolder = -1;//no one

        needsFinalized = false;

        /*Get an item ID and description from the file*/
        File itemFile = new File("resources/items.txt");
        Scanner scanner = new Scanner(itemFile);

        String input;
        String[] itemSpec = null;
        int counter = 0;
        try {
            //Traverse file lines til line number itemID
            while(scanner.hasNextLine()){
                input = scanner.nextLine();
                if(counter == itemLine){
                    itemSpec = input.split(" ");
                    //get ID and description from formatted file
                    itemID = itemSpec[0];
                    description = itemSpec[1];
                    break;
                }
                counter++;
            }
            scanner.close();

            //Get a random MIN bid
            SecureRandom random = new SecureRandom();
            double bid = random.nextDouble() * 20.0;
            //make the double value only be to two decimals
            minimumBid = Math.floor(bid * 100) / 100;
        }
        catch (ArrayIndexOutOfBoundsException e){
            System.out.println("Out of bounds - " + Arrays.toString(itemSpec));
        }
    }

    /**
     * Gets the name of the item
     * @return The item name
     */
    public String getItemID() {
        return itemID;
    }

    /**
     * Get description
     * @return String description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Get the min bid
     * @return the min bid
     */
    public double getMinimumBid() {
        return minimumBid;
    }

    /**
     * Get the current bid amount
     * @return The amount of current bid
     */
    public double getCurrentBid() {
        return currentBid;
    }

    /**
     * Set the current bid
     * @param currentBid is the new bid amount
     */
    public void setCurrentBid(double currentBid) {
        this.currentBid = currentBid;
    }

    /**
     * Set the new min bid
     * @param minimumBid is the new min bid
     */
    public void setMinimumBid(double minimumBid) {
        this.minimumBid = minimumBid;
    }

    /**
     * Returns the account number of the agent who currently holds the bid
     * @return the current bid holder account number
     */
    public int getCurrentBidHolder() {
        return currentBidHolder;
    }

    /**
     * Set the current bid holder for this item
     * @param currentBidHolder the account number of the agent who has the bid on this item
     */
    public void setCurrentBidHolder(int currentBidHolder) {
        this.currentBidHolder = currentBidHolder;
    }

    /**
     * Is true if a bid has been placed on this item and its timer has timed out
     * @param needsFinalized is used to set it to true
     */
    public void setNeedsFinalized(boolean needsFinalized) {
        this.needsFinalized = needsFinalized;
    }

    /**
     * Getter for needsFinalized
     * @return whether or not this item has been bid on and the respective timer has timed out
     */
    public boolean isNeedsFinalized() {
        return needsFinalized;
    }
}